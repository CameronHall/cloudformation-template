AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation template for installing Datadog AWS Integration
Parameters:
  ExternalId:
    Description: >-
      External ID for the Datadog role (generate at
      https://app.datadoghq.com/account/settings#integrations/amazon-web-services)
    Type: String
  DdApiKey:
    Description: >-
      API key for the Datadog account (find at
      https://app.datadoghq.com/account/settings#api)
    Type: String
    NoEcho: true
  DdSite:
    Type: String
    Default: datadoghq.com
    AllowedValues:
      - datadoghq.com
      - datadoghq.eu
    Description: Define your Datadog Site to send data to -- select datadoghq.com for the Datadog US site or datadoghq.eu for the Datadog EU site.
  ForwarderRegions:
    Description: A comma-delimited list of AWS regions to deploy the Datadog Forwarder to, e.g., us-east-1,eu-west-2
    Type: CommaDelimitedList
  DatadogAWSIntegrationRoleName:
    Description: Customize the name of IAM role for Datadog AWS integration
    Type: String  
    Default: DatadogAWSIntegrationRole
Resources:
  DatadogAWSIntegrationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::464622532012:root'
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref ExternalId
      Path: /
      RoleName: !Ref DatadogAWSIntegrationRoleName
      Policies:
        - PolicyName: DatadogAWSIntegrationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'apigateway:GET'
                  - 'autoscaling:Describe*'
                  - 'budgets:ViewBudget'
                  - 'cloudfront:GetDistributionConfig'
                  - 'cloudfront:ListDistributions'
                  - 'cloudtrail:DescribeTrails'
                  - 'cloudtrail:GetTrailStatus'
                  - 'cloudwatch:Describe*'
                  - 'cloudwatch:Get*'
                  - 'cloudwatch:List*'
                  - 'codedeploy:List*'
                  - 'codedeploy:BatchGet*'
                  - 'directconnect:Describe*'
                  - 'dynamodb:List*'
                  - 'dynamodb:Describe*'
                  - 'ec2:Describe*'
                  - 'ecs:Describe*'
                  - 'ecs:List*'
                  - 'elasticache:Describe*'
                  - 'elasticache:List*'
                  - 'elasticfilesystem:DescribeFileSystems'
                  - 'elasticfilesystem:DescribeTags'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticmapreduce:List*'
                  - 'elasticmapreduce:Describe*'
                  - 'es:ListTags'
                  - 'es:ListDomainNames'
                  - 'es:DescribeElasticsearchDomains'
                  - 'health:DescribeEvents'
                  - 'health:DescribeEventDetails'
                  - 'health:DescribeAffectedEntities'
                  - 'kinesis:List*'
                  - 'kinesis:Describe*'
                  - 'lambda:AddPermission'
                  - 'lambda:GetPolicy'
                  - 'lambda:List*'
                  - 'lambda:RemovePermission'
                  - 'logs:TestMetricFilter'
                  - 'logs:PutSubscriptionFilter'
                  - 'logs:DeleteSubscriptionFilter'
                  - 'logs:DescribeSubscriptionFilters'
                  - 'rds:Describe*'
                  - 'rds:List*'
                  - 'redshift:DescribeClusters'
                  - 'redshift:DescribeLoggingStatus'
                  - 'route53:List*'
                  - 's3:GetBucketLogging'
                  - 's3:GetBucketLocation'
                  - 's3:GetBucketNotification'
                  - 's3:GetBucketTagging'
                  - 's3:ListAllMyBuckets'
                  - 's3:PutBucketNotification'
                  - 'ses:Get*'
                  - 'sns:List*'
                  - 'sns:Publish'
                  - 'sqs:ListQueues'
                  - 'states:ListStateMachines'
                  - 'states:DescribeStateMachine'
                  - 'support:*'
                  - 'tag:GetResources'
                  - 'tag:GetTagKeys'
                  - 'tag:GetTagValues'
                  - 'xray:BatchGetTraces'
                  - 'xray:GetTraceSummaries'
                Effect: Allow
                Resource: '*'
  Forwarders:
    Type: Custom::Forwarders
    Properties:
      ServiceToken: !GetAtt 'ForwarderStackMaker.Arn'
      ForwarderRegions: !Ref ForwarderRegions
      DdSite: !Ref DdSite
      DdApiKey: !Ref DdApiKey
  ForwarderStackMaker:
    Type: AWS::Serverless::Function
    Properties:
      Description: Launch and update Datadog Forwarder CloudFormation stack in specified regions
      Handler: index.handler
      Runtime: python3.7
      Timeout: 300
      InlineCode: |
          import json
          import logging
          import threading
          import boto3
          import urllib.request
          def send_cfn_resp(event, context, response_status):
              resp_body = json.dumps({
                  'Status': response_status,
                  'Reason': f'See reasons in CloudWatch Logs - group: {context.log_group_name}, stream:{context.log_stream_name}',
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {}
              }).encode('utf-8')
              req = urllib.request.Request(url=event['ResponseURL'], data=resp_body, method='PUT')
              with urllib.request.urlopen(req) as f:
                  logging.info(f'Sent response to CloudFormation: {f.status}, {f.reason}')
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              send_cfn_resp(event, context, 'FAILED')
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              logging.info(f'Received event: {json.dumps(event)}')
              try:
                  forwarder_regions = event['ResourceProperties']['ForwarderRegions']
                  dd_site = event['ResourceProperties']['DdSite']
                  dd_api_key = event['ResourceProperties']['DdApiKey']
                  if event['RequestType'] == 'Create':
                      for region in forwarder_regions:
                            create_forwarder(region, dd_site, dd_api_key)
                  # TODO: Handle Update and Delete
              except Exception as e:
                  logging.exception(f'Exception when creating forwarders in {forwarder_regions}')
                  send_cfn_resp(event, context, 'FAILED')
              else:
                  send_cfn_resp(event, context, 'SUCCESS')
              finally:
                  timer.cancel()
          def create_forwarder(region, dd_site, dd_api_key):
              cfn_client = boto3.client("cloudformation", region_name=region)
              response = cfn_client.create_stack(
                  StackName='datadog-forwarder',
                  TemplateURL='https://dd-log-sam.s3.amazonaws.com/templates/latest.yaml',
                  Parameters=[
                      {
                          'ParameterKey': 'DdApiKey',
                          'ParameterValue': dd_api_key,
                          'UsePreviousValue': False
                      },
                      {
                          'ParameterKey': 'DdSite',
                          'ParameterValue': dd_site,
                          'UsePreviousValue': False
                      },
                  ],
                  Capabilities=['CAPABILITY_IAM','CAPABILITY_NAMED_IAM','CAPABILITY_AUTO_EXPAND'],
                  RoleARN='arn:aws:iam::172597598159:role/account-admin', # TODO: Use RoleARN of the parent stack
                  Tags=[{
                      'Key': 'ParentStackId',
                      'Value': 'FIXME',
                  }]
              )
      Policies:
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - cloudformation:*
              - iam:PassRole
            Resource: '*'
Outputs:
  DatadogAWSIntegrationRole:
    Description: Datadog AWS Integration IAM Role Name
    Value: !Ref DatadogAWSIntegrationRole
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Required
      Parameters:
        - ExternalId
        - DdApiKey
    - Label:
        default: Advanced (Optional)
      Parameters:
        - DatadogAWSIntegrationRoleName