AWSTemplateFormatVersion: 2010-09-09
Description: Datadog AWS Integration
Parameters:
  ExternalId:
    Description: >-
      External ID for the Datadog role (generate at
      https://app.datadoghq.com/account/settings#integrations/amazon-web-services)
    Type: String
  DdApiKey:
    Description: >-
      API key for the Datadog account (find at
      https://app.datadoghq.com/account/settings#api)
    Type: String
    NoEcho: true
  DdSite:
    Type: String
    Default: datadoghq.com
    Description: Define your Datadog Site to send data to. For the Datadog EU site, set to datadoghq.eu
  IAMRoleName:
    Description: Customize the name of IAM role for Datadog AWS integration
    Type: String
    Default: DatadogIntegrationRole
  Permissions:
    Description: >-
      Customize the permission level for the Datadog IAM role.
      Select "Core" to only grant Datadog read-only permissions (not recommended).
    Type: String
    Default: Full
    AllowedValues:
      - Full
      - Core
  LogArchives:
    Description: >-
      S3 paths to store log archives for log rehydration. Separate multiple paths with comma,
      e.g., "my-bucket,my-bucket-with-path/path".
    Type: String
    Default: ''
  DdAWSAccountId:
    Description: >-
      Datadog AWS account ID allowed to assume the integration IAM role. DO NOT CHANGE!
    Type: String
    Default: "464622532012"
  DdForwarderName:
    Type: String
    Default: DatadogForwarder
    Description: The Datadog Forwarder Lambda function name. DO NOT change when updating an existing CloudFormation stack, otherwise the current forwarder function will be replaced and all the triggers will be lost.
  InstallLogArchivePolicyMacro:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: If the LogArchivePolicy Macro is already installed, set this to false to skip the installation of the LogArchivePolicy Macro.
Conditions:
  ShouldInstallLogArchivePolicyMacro:
    Fn::Equals:
      - Ref: InstallLogArchivePolicyMacro
      - true
Resources:
  LogArchivePolicyMacroStack:
    Type: AWS::CloudFormation::Stack
    Condition: ShouldInstallLogArchivePolicyMacro
    Properties:
      TemplateURL: "https://datadog-cloudformation-template.s3.amazonaws.com/aws/log_archive_policy_macro.yaml"
  DatadogIntegrationRoleStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://datadog-cloudformation-template.s3.amazonaws.com/aws/datadog_integration_role.yaml"
      Parameters:
        ExternalId: !Ref ExternalId
        Permissions: !Ref Permissions
        IAMRoleName: !Ref IAMRoleName
        LogArchives: !Ref LogArchives
        DdAWSAccountId: !Ref DdAWSAccountId
      Tags:   
        - # A trick to create a conditional dependency on LogArchivePolicyMacroStack
          # https://stackoverflow.com/questions/34607476/cloudformation-apply-condition-on-dependson
          Key: "LogArchivePolicyMacroStackId"
          Value: !If [ShouldInstallLogArchivePolicyMacro, !Ref LogArchivePolicyMacroStack, "null"]
  ForwarderStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://datadog-cloudformation-template.s3.amazonaws.com/aws/forwarder/latest.yaml"
      Parameters:
        DdApiKey: !Ref DdApiKey
        DdSite: !Ref DdSite
        FunctionName: !Ref DdForwarderName
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Required
      Parameters:
        - ExternalId
        - DdApiKey
        - DdSite
    - Label:
        default: Optional
      Parameters:
        - IAMRoleName
        - Permissions
        - LogArchives
    - Label:
        default: Advanced
      Parameters:
        - DdAWSAccountId
        - DdForwarderName
        - InstallLogArchivePolicyMacro