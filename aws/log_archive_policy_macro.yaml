AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation Macro Generates Log Archive S3 Policy
Resources:
  LogArchivePolicyMacro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: LogArchivePolicy
      FunctionName: !GetAtt LogArchivePolicyMacroFunction.Arn
  LogArchivePolicyMacroFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: index.handler
      InlineCode: |
          import traceback
          def handler(event, context):
              try:
                  log_archives = event["params"]["LogArchives"].strip()
                  if not log_archives:
                      return {
                          "requestId": event["requestId"],
                          "status": "success",
                          "fragment": {"Ref" : "AWS::NoValue"},
                      }
                  s3_paths = [path.strip() for path in log_archives.split(',')]
                  fragment = {
                      "PolicyName": "DatadogLogArchiveAndRehydrate",
                      "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "s3:PutObject",
                                      "s3:GetObject"
                                  ],
                                  "Resource": [
                                      f"arn:aws:s3:::{s3_path + '*' if s3_path.endswith('/') else s3_path + '/*'}"
                                      for s3_path in s3_paths
                                  ]
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "s3:ListBucket"
                                  ],
                                  "Resource": list(set([
                                      f"arn:aws:s3:::{s3_path.split('/')[0]}"
                                      for s3_path in s3_paths
                                  ]))
                              }
                          ]
                      }
                  }
                  return {
                      "requestId": event["requestId"],
                      "status": "success",
                      "fragment": fragment,
                  }
              except Exception as e:
                  traceback.print_exc()
                  return {
                      "requestId": event["requestId"],
                      "status": "failure",
                      "errorMessage": str(e),
                  }